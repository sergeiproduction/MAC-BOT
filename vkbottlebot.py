from vkbottle.bot import Bot,Message
from vkbottle import Keyboard,KeyboardButtonColor, \
    Text, \
    GroupEventType,GroupTypes,VKAPIError
from vkbottle_types import BaseStateGroup
from vkbottle import CtxStorage, EMPTY_KEYBOARD
from datetime import date, timedelta

from db import MODULE_RASP_DB
dbusers = MODULE_RASP_DB('dbtimetable.db')

bot = Bot(token="ac9d7b04ae21a6ffb8fa8c0829be1b3720c631260c54a8dec86acd8203750f0755c0d720247ceca581938")
bot.on.vbml_ignore_case = True
ctx = CtxStorage()

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞
keyboardchoise = Keyboard(one_time=False)
keyboardchoise.add(Text("–°—Ç—É–¥–µ–Ω—Ç",{"cmd":"studentGroup"}))
keyboardchoise.add(Text("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",{"cmd":"teacherTest"}))

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
keyboardmain = Keyboard(one_time=False)
keyboardmain.add(Text("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ",{"cmd":"rasp"}),color=KeyboardButtonColor.PRIMARY)
keyboardmain.row()
keyboardmain.add(Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏",{"cmd":"settings"}))

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
keyboardrasp = Keyboard(one_time=False)
keyboardrasp.add(Text("–°–µ–≥–æ–¥–Ω—è",{"cmd":"today"}),color=KeyboardButtonColor.PRIMARY)
keyboardrasp.add(Text("–ó–∞–≤—Ç—Ä–∞",{"cmd":"tomorrow"}),color=KeyboardButtonColor.PRIMARY)
keyboardrasp.add(Text("–ù–µ–¥–µ–ª—è",{"cmd":"week"}),color=KeyboardButtonColor.PRIMARY)
keyboardrasp.row()
keyboardrasp.add(Text("–ù–∞–∑–∞–¥",{"cmd":"main"}))

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
keyboardsettings = Keyboard(one_time=False)
keyboardsettings.add(Text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É",{"cmd":"sub"}),color=KeyboardButtonColor.POSITIVE)
keyboardsettings.add(Text("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏",{"cmd":"unsub"}),color=KeyboardButtonColor.NEGATIVE)
keyboardsettings.row()
keyboardsettings.add(Text("–°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É",{"cmd":"changeGroup"}))
keyboardsettings.row()
keyboardsettings.add(Text("–ù–∞–∑–∞–¥",{"cmd":"main"}))

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–ø–æ–¥–∞
keyboardsettingsTeacher = Keyboard(one_time=False)
keyboardsettingsTeacher.add(Text("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É",{"cmd":"sub"}),color=KeyboardButtonColor.POSITIVE)
keyboardsettingsTeacher.add(Text("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏",{"cmd":"unsub"}),color=KeyboardButtonColor.NEGATIVE)
keyboardsettingsTeacher.row()
keyboardsettingsTeacher.add(Text("–ù–∞–∑–∞–¥",{"cmd":"main"}))



class RegData(BaseStateGroup):
    GROUP = 0



@bot.on.private_message(text='–ù–∞—á–∞—Ç—å')
@bot.on.private_message(text='–ù–∞—á–∞–ª–æ')
@bot.on.private_message(text='–°—Ç–∞—Ä—Ç')
@bot.on.private_message(payload={"cmd":"choise"})
async def choise(Message: Message):
    user = await bot.api.users.get(Message.from_id)
    firstName = user[0].first_name
    lastName = user[0].last_name
    userID = user[0].id

    if(not dbusers.user_exists(userID)): # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        dbusers.add_user(userID, firstName, lastName)
    else: # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        dbusers.update_userNotification(userID)

    await Message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å: –°—Ç—É–¥–µ–Ω—Ç/–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",keyboard=keyboardchoise)

#@bot.on.private_message(text='–ú–µ–Ω—é')
@bot.on.private_message(payload={"cmd":"main"})
async def mainmenu(Message: Message):
    await Message.answer("üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìç",keyboard=keyboardmain) #–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É

#@bot.on.private_message(text='')
@bot.on.private_message(payload={"cmd":"rasp"})
async def rasp(Message: Message):
    await Message.answer("üìÑ –ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è üìÑ",keyboard=keyboardrasp)

#@bot.on.private_message(text='')
@bot.on.private_message(payload={"cmd":"settings"})
async def settings(Message: Message):
    user = await bot.api.users.get(Message.from_id)
    userID = user[0].id

    if (dbusers.get_userFromID(userID)[0][3] == '–°—Ç—É–¥–µ–Ω—Ç'):
        textAnswer = '‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô\n\n–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: ' + str(dbusers.get_userFromID(userID)[0][6])
        if (dbusers.user_checkNotify(userID)):
            textAnswer += '\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: –í–∫–ª—é—á–µ–Ω—ã'
        else:
            textAnswer += '\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: –í—ã–∫–ª—é—á–µ–Ω—ã'
        await Message.answer(textAnswer,keyboard=keyboardsettings)
    elif (dbusers.get_userFromID(userID)[0][3] == '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'):
        textAnswer = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'
        if (dbusers.user_checkNotify(userID)):
            textAnswer += '\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: –í–∫–ª—é—á–µ–Ω—ã'
        else:
            textAnswer += '\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: –í—ã–∫–ª—é—á–µ–Ω—ã'
        await Message.answer(textAnswer,keyboard=keyboardsettingsTeacher)

#@bot.on.private_message(text='–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')
@bot.on.private_message(payload={"cmd":"teacherTest"})
async def teacherAdd(Message: Message):
    user = await bot.api.users.get(Message.from_id)
    name = user[0].first_name
    surname = user[0].last_name
    userID = user[0].id

    if (dbusers.teacher_existsSurName(surname, name)):
        dbusers.update_userStatus(userID, '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')
        await Message.answer("üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìç\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!",keyboard=keyboardmain)
    else:
        await Message.answer("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º! ‚ö†",keyboard=keyboardchoise)
    
@bot.on.private_message(payload={"cmd":"sub"})
async def userSub(Message: Message):
    user = await bot.api.users.get(Message.from_id)
    userID = user[0].id
    if(not dbusers.user_exists(userID)):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        firstName = user[0].first_name
        lastName = user[0].last_name

        dbusers.add_user(userID, firstName, lastName)
        await Message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å: –°—Ç—É–¥–µ–Ω—Ç/–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",keyboard=keyboardchoise)
    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        user = await bot.api.users.get(Message.from_id)
        userID = user[0].id

        dbusers.update_userNotification(userID)
        await Message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüòä",keyboard=keyboardmain)

@bot.on.private_message(payload={"cmd":"unsub"})
async def userUnsub(Message: Message):
    user = await bot.api.users.get(Message.from_id)
    userID = user[0].id
    if(not dbusers.user_exists(userID)):
        # –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (–∑–∞–ø–æ–º–∏–Ω–∞–µ–º)
        firstName = user[0].first_name
        lastName = user[0].last_name

        dbusers.add_user(userID, firstName, lastName)
        dbusers.update_userNotification(userID, False)
        await Message.answer("–í—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã, –∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ãüòî\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å: –°—Ç—É–¥–µ–Ω—Ç/–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",keyboard=keyboardchoise)
    else:
        # –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        dbusers.update_userNotification(userID, False)
        await Message.answer("–ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞üòî",keyboard=keyboardmain)

@bot.on.private_message(payload={"cmd":"changeGroup"})
async def groupChange(Message: Message):
    await Message.answer("üë• –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É üë•",{"cmd":"studentGroup"},keyboard=EMPTY_KEYBOARD)

@bot.on.private_message(payload={"cmd":"today"})
async def raspToday(Message: Message):
    current_date = date.today()
    user = await bot.api.users.get(Message.from_id)
    firstName = user[0].first_name
    lastName = user[0].last_name
    userID = user[0].id #event.object.user_id

    if (dbusers.user_exists(userID)): #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ

        if (dbusers.get_userFromID(userID)[0][3] == '–°—Ç—É–¥–µ–Ω—Ç'): # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º

            usergroup = dbusers.get_userFromID(userID)[0][6] #–£–∑–Ω–∞—Ç—å –≥—Ä—É–ø–ø—É

            if (dbusers.timetableGroupDate_exists(usergroup, current_date)): #–ï—Å–ª–∏ —Ä–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –µ—Å—Ç—å, –¥–ª—è –≥—Ä—É–ø–ø—ã
                todayTimetable = dbusers.get_timetableFromGroupDate(usergroup, current_date)
                textTimetable = '‚úÖ ' + str(todayTimetable[0][2]).upper() + ' ' + str(todayTimetable[0][8]) + ' ‚úÖ\n'# + '\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n'
                startLesson = ''
                endLesson = ''
                startBreak = ''
                endBreak = ''

                for i in range(len(todayTimetable)):
                    if (dbusers.lessonTime_exists(todayTimetable[i][2], todayTimetable[i][3])):
                        lessonTime = dbusers.get_lessonTimeDayNumber(todayTimetable[i][2], todayTimetable[i][3])
                        startLesson = str(lessonTime[0][3])
                        endLesson = str(lessonTime[0][4])
                        startBreak = str(lessonTime[0][5])
                        endBreak = str(lessonTime[0][6])
                    textTimetable += (str(todayTimetable[i][3]) + '. ' + str(todayTimetable[i][5]) + '\n–í—Ä–µ–º—è: —Å ' + startLesson + ' –¥–æ ' + endLesson + '\n–ü–µ—Ä–µ—Ä—ã–≤: —Å ' + startBreak + ' –¥–æ ' + endBreak + '\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: ' + str(todayTimetable[i][4]) + '\n–í–∏–¥ –∑–∞–Ω—è—Ç–∏—è: ' + str(todayTimetable[i][6]) + '\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ' + str(todayTimetable[i][7]) + '\n\n')

                await Message.answer(textTimetable,keyboard=keyboardrasp)
            else: #–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω–∞, –ª–∏–±–æ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                if (str(dbusers.get_userFromID(userID)[0][6]) == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'): #–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤–≤–µ–¥–µ–Ω–∞
                    await Message.answer("üë• –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É üë•",{"cmd":"studentGroup"},keyboard=EMPTY_KEYBOARD)
                else: #–ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                    await Message.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ' + str(current_date) + ' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',keyboard=keyboardrasp)

        elif (dbusers.get_userFromID(userID)[0][3] == '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'):

            teacherMiddleName = dbusers.get_teacherMiddleName(lastName, firstName)[0]
            teacherFullName = lastName + ' ' + firstName + ' ' + teacherMiddleName

            if (dbusers.timetableTeacherDate_exists(teacherFullName, current_date)): #–ï—Å–ª–∏ —Ä–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –µ—Å—Ç—å, –¥–ª—è –ø—Ä–µ–ø–æ–¥–æ–≤
                todayTimetable = dbusers.get_timetableFromTeacherDate(teacherFullName, current_date)
                textTimetable = '‚úÖ ' + str(todayTimetable[0][2]).upper() + ' ' + str(todayTimetable[0][8]) + ' ‚úÖ\n'# + '\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n'
                startLesson = ''
                endLesson = ''
                startBreak = ''
                endBreak = ''

                for i in range(len(todayTimetable)):
                    if (dbusers.lessonTime_exists(todayTimetable[i][2], todayTimetable[i][3])):
                        lessonTime = dbusers.get_lessonTimeDayNumber(todayTimetable[i][2], todayTimetable[i][3])
                        startLesson = str(lessonTime[0][3])
                        endLesson = str(lessonTime[0][4])
                        startBreak = str(lessonTime[0][5])
                        endBreak = str(lessonTime[0][6])
                    textTimetable += (str(todayTimetable[i][3]) + '. ' + str(todayTimetable[i][5]) + '\n–í—Ä–µ–º—è: —Å ' + startLesson + ' –¥–æ ' + endLesson + '\n–ü–µ—Ä–µ—Ä—ã–≤: —Å ' + startBreak + ' –¥–æ ' + endBreak + '\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: ' + str(todayTimetable[i][4]) + '\n–í–∏–¥ –∑–∞–Ω—è—Ç–∏—è: ' + str(todayTimetable[i][6]) + '\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ' + str(todayTimetable[i][7]) + '\n\n')

                await Message.answer(textTimetable,keyboard=keyboardrasp)
            else: #–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω–∞, –ª–∏–±–æ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                '''if (str(dbusers.get_userFromID(userID)[0][6]) == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'): #–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤–≤–µ–¥–µ–Ω–∞
                    await Message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É",{"cmd":"studentGroup"},keyboard=EMPTY_KEYBOARD)
                else: #–ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'''
                await Message.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ' + str(current_date) + ' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',keyboard=keyboardrasp)

    else: #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
        dbusers.add_user(userID, firstName, lastName) #–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await Message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å: –°—Ç—É–¥–µ–Ω—Ç/–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",keyboard=keyboardchoise)

@bot.on.private_message(payload={"cmd":"tomorrow"})
async def raspTomorrow(Message: Message):
    current_date = date.today() + timedelta(days=1)
    user = await bot.api.users.get(Message.from_id)
    firstName = user[0].first_name
    lastName = user[0].last_name
    userID = user[0].id

    if (dbusers.user_exists(userID)): #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ

        if (dbusers.get_userFromID(userID)[0][3] == '–°—Ç—É–¥–µ–Ω—Ç'): # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º

            usergroup = dbusers.get_userFromID(userID)[0][6] #–£–∑–Ω–∞—Ç—å –≥—Ä—É–ø–ø—É

            if (dbusers.timetableGroupDate_exists(usergroup, current_date)): #–ï—Å–ª–∏ —Ä–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –µ—Å—Ç—å, –¥–ª—è –≥—Ä—É–ø–ø—ã
                todayTimetable = dbusers.get_timetableFromGroupDate(usergroup, current_date)
                textTimetable = '‚úÖ ' + str(todayTimetable[0][2]).upper() + ' ' + str(todayTimetable[0][8]) + ' ‚úÖ\n'# + '\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n'
                startLesson = ''
                endLesson = ''
                startBreak = ''
                endBreak = ''

                for i in range(len(todayTimetable)):
                    if (dbusers.lessonTime_exists(todayTimetable[i][2], todayTimetable[i][3])):
                        lessonTime = dbusers.get_lessonTimeDayNumber(todayTimetable[i][2], todayTimetable[i][3])
                        startLesson = str(lessonTime[0][3])
                        endLesson = str(lessonTime[0][4])
                        startBreak = str(lessonTime[0][5])
                        endBreak = str(lessonTime[0][6])
                    textTimetable += (str(todayTimetable[i][3]) + '. ' + str(todayTimetable[i][5]) + '\n–í—Ä–µ–º—è: —Å ' + startLesson + ' –¥–æ ' + endLesson + '\n–ü–µ—Ä–µ—Ä—ã–≤: —Å ' + startBreak + ' –¥–æ ' + endBreak + '\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: ' + str(todayTimetable[i][4]) + '\n–í–∏–¥ –∑–∞–Ω—è—Ç–∏—è: ' + str(todayTimetable[i][6]) + '\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ' + str(todayTimetable[i][7]) + '\n\n')

                await Message.answer(textTimetable,keyboard=keyboardrasp)
            else: #–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω–∞, –ª–∏–±–æ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                if (str(dbusers.get_userFromID(userID)[0][6]) == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'): #–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤–≤–µ–¥–µ–Ω–∞
                    await Message.answer("üë• –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É üë•",{"cmd":"studentGroup"},keyboard=EMPTY_KEYBOARD)
                else: #–ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                    await Message.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ' + str(current_date) + ' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',keyboard=keyboardrasp)

        elif (dbusers.get_userFromID(userID)[0][3] == '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'):

            teacherMiddleName = dbusers.get_teacherMiddleName(lastName, firstName)[0]
            teacherFullName = lastName + ' ' + firstName + ' ' + teacherMiddleName

            if (dbusers.timetableTeacherDate_exists(teacherFullName, current_date)): #–ï—Å–ª–∏ —Ä–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –µ—Å—Ç—å, –¥–ª—è –ø—Ä–µ–ø–æ–¥–æ–≤
                todayTimetable = dbusers.get_timetableFromTeacherDate(teacherFullName, current_date)
                textTimetable = '‚úÖ ' + str(todayTimetable[0][2]).upper() + ' ' + str(todayTimetable[0][8]) + ' ‚úÖ\n'# + '\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n'
                startLesson = ''
                endLesson = ''
                startBreak = ''
                endBreak = ''

                for i in range(len(todayTimetable)):
                    if (dbusers.lessonTime_exists(todayTimetable[i][2], todayTimetable[i][3])):
                        lessonTime = dbusers.get_lessonTimeDayNumber(todayTimetable[i][2], todayTimetable[i][3])
                        startLesson = str(lessonTime[0][3])
                        endLesson = str(lessonTime[0][4])
                        startBreak = str(lessonTime[0][5])
                        endBreak = str(lessonTime[0][6])
                    textTimetable += (str(todayTimetable[i][3]) + '. ' + str(todayTimetable[i][5]) + '\n–í—Ä–µ–º—è: —Å ' + startLesson + ' –¥–æ ' + endLesson + '\n–ü–µ—Ä–µ—Ä—ã–≤: —Å ' + startBreak + ' –¥–æ ' + endBreak + '\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: ' + str(todayTimetable[i][4]) + '\n–í–∏–¥ –∑–∞–Ω—è—Ç–∏—è: ' + str(todayTimetable[i][6]) + '\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ' + str(todayTimetable[i][7]) + '\n\n')

                await Message.answer(textTimetable,keyboard=keyboardrasp)
            else: #–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω–∞, –ª–∏–±–æ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                '''if (str(dbusers.get_userFromID(userID)[0][6]) == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'): #–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤–≤–µ–¥–µ–Ω–∞
                    await Message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É",{"cmd":"studentGroup"},keyboard=EMPTY_KEYBOARD)
                else: #–ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'''
                await Message.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ' + str(current_date) + ' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',keyboard=keyboardrasp)

    else: #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
        dbusers.add_user(userID, firstName, lastName) #–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await Message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å: –°—Ç—É–¥–µ–Ω—Ç/–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",keyboard=keyboardchoise)
        
@bot.on.private_message(payload={"cmd":"week"})
async def raspWeek(Message: Message):
    user = await bot.api.users.get(Message.from_id)
    firstName = user[0].first_name
    lastName = user[0].last_name
    userID = user[0].id



    if (dbusers.user_exists(userID)): #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ
        usergroup = dbusers.get_userFromID(userID)[0][6] #–£–∑–Ω–∞—Ç—å –≥—Ä—É–ø–ø—É
        textTimetable = ''

        if (dbusers.get_userFromID(userID)[0][3] == '–°—Ç—É–¥–µ–Ω—Ç'): # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º

            for j in range(7):
                current_date = date.today() + timedelta(days=j)

                if (dbusers.timetableGroupDate_exists(usergroup, current_date)): #–ï—Å–ª–∏ —Ä–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –µ—Å—Ç—å, –¥–ª—è –≥—Ä—É–ø–ø—ã
                    todayTimetable = dbusers.get_timetableFromGroupDate(usergroup, current_date)

                    textTimetable += '‚úÖ ' + str(todayTimetable[0][2]).upper() + ' ' + str(todayTimetable[0][8]) + ' ‚úÖ\n'
                    startLesson = ''
                    endLesson = ''
                    startBreak = ''
                    endBreak = ''
                    for i in range(len(todayTimetable)):
                        if (dbusers.lessonTime_exists(todayTimetable[i][2], todayTimetable[i][3])):
                            lessonTime = dbusers.get_lessonTimeDayNumber(todayTimetable[i][2], todayTimetable[i][3])
                            startLesson = str(lessonTime[0][3])
                            endLesson = str(lessonTime[0][4])
                            startBreak = str(lessonTime[0][5])
                            endBreak = str(lessonTime[0][6])
                        textTimetable += (str(todayTimetable[i][3]) + '. ' + str(todayTimetable[i][5]) + '\n–í—Ä–µ–º—è: —Å ' + startLesson + ' –¥–æ ' + endLesson + '\n–ü–µ—Ä–µ—Ä—ã–≤: —Å ' + startBreak + ' –¥–æ ' + endBreak + '\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: ' + str(todayTimetable[i][4]) + '\n–í–∏–¥ –∑–∞–Ω—è—Ç–∏—è: ' + str(todayTimetable[i][6]) + '\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ' + str(todayTimetable[i][7]) + '\n\n')
                    textTimetable += '\n'
                else: #–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω–∞, –ª–∏–±–æ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                    if (str(dbusers.get_userFromID(userID)[0][6]) == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'): #–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤–≤–µ–¥–µ–Ω–∞
                        await Message.answer("üë• –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É üë•",{"cmd":"studentGroup"},keyboard=EMPTY_KEYBOARD)
                        break
                    else: #–ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                        textTimetable += '\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ' + str(current_date) + ' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n'
            await Message.answer(textTimetable,keyboard=keyboardrasp)

        elif (dbusers.get_userFromID(userID)[0][3] == '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'):

            teacherMiddleName = dbusers.get_teacherMiddleName(lastName, firstName)[0]
            teacherFullName = lastName + ' ' + firstName + ' ' + teacherMiddleName

            for j in range(7):
                current_date = date.today() + timedelta(days=j)

                if (dbusers.timetableTeacherDate_exists(teacherFullName, current_date)): #–ï—Å–ª–∏ —Ä–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –µ—Å—Ç—å, –¥–ª—è –≥—Ä—É–ø–ø—ã
                    todayTimetable = dbusers.get_timetableFromTeacherDate(teacherFullName, current_date)

                    textTimetable += '‚úÖ ' + str(todayTimetable[0][2]).upper() + ' ' + str(todayTimetable[0][8]) + ' ‚úÖ\n'
                    startLesson = ''
                    endLesson = ''
                    startBreak = ''
                    endBreak = ''
                    for i in range(len(todayTimetable)):
                        if (dbusers.lessonTime_exists(todayTimetable[i][2], todayTimetable[i][3])):
                            lessonTime = dbusers.get_lessonTimeDayNumber(todayTimetable[i][2], todayTimetable[i][3])
                            startLesson = str(lessonTime[0][3])
                            endLesson = str(lessonTime[0][4])
                            startBreak = str(lessonTime[0][5])
                            endBreak = str(lessonTime[0][6])
                        textTimetable += (str(todayTimetable[i][3]) + '. ' + str(todayTimetable[i][5]) + '\n–í—Ä–µ–º—è: —Å ' + startLesson + ' –¥–æ ' + endLesson + '\n–ü–µ—Ä–µ—Ä—ã–≤: —Å ' + startBreak + ' –¥–æ ' + endBreak + '\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: ' + str(todayTimetable[i][4]) + '\n–í–∏–¥ –∑–∞–Ω—è—Ç–∏—è: ' + str(todayTimetable[i][6]) + '\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ' + str(todayTimetable[i][7]) + '\n\n')
                    textTimetable += '\n'
                else: #–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω–∞, –ª–∏–±–æ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                    if (str(dbusers.get_userFromID(userID)[0][6]) == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'): #–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤–≤–µ–¥–µ–Ω–∞
                        await Message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É",{"cmd":"studentGroup"},keyboard=EMPTY_KEYBOARD)
                        break
                    else: #–ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                        textTimetable += '\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ' + str(current_date) + ' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n\n'
            await Message.answer(textTimetable,keyboard=keyboardrasp)

    else: #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
        dbusers.add_user(userID, firstName, lastName) #–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await Message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å: –°—Ç—É–¥–µ–Ω—Ç/–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",keyboard=keyboardchoise)

'''
@bot.on.private_message(payload={"cmd":"week"})
async def raspWeek(Message: Message):
    user = await bot.api.users.get(Message.from_id)
    firstName = user[0].first_name
    lastName = user[0].last_name
    userID = user[0].id

    if (dbusers.user_exists(userID)): #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ
        usergroup = dbusers.get_userFromID(userID)[0][6] #–£–∑–Ω–∞—Ç—å –≥—Ä—É–ø–ø—É

        for j in range(7):
            current_date = date.today() + timedelta(days=j)

            if (dbusers.timetableGroupDate_exists(usergroup, current_date)): #–ï—Å–ª–∏ —Ä–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –µ—Å—Ç—å, –¥–ª—è –≥—Ä—É–ø–ø—ã
                todayTimetable = dbusers.get_timetableFromGroupDate(usergroup, current_date)
                textTimetable = str(todayTimetable[0][2]).upper() + ' ' + str(todayTimetable[0][8]) + '\n'# + '\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n'
                for i in range(len(todayTimetable)):
                    textTimetable += (str(todayTimetable[i][3]) + '. ' + str(todayTimetable[i][5]) + '\n–í—Ä–µ–º—è: —Å ' + ' –¥–æ ' + '\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: ' + str(todayTimetable[i][4]) + '\n–í–∏–¥ –∑–∞–Ω—è—Ç–∏—è: ' + str(todayTimetable[i][6]) + '\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ' + str(todayTimetable[i][7]) + '\n')

                await Message.answer(textTimetable,keyboard=keyboardrasp)
            else: #–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω–∞, –ª–∏–±–æ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                if (str(dbusers.get_userFromID(userID)[0][6]) == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'): #–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤–≤–µ–¥–µ–Ω–∞
                    await Message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É",{"cmd":"studentGroup"},keyboard=EMPTY_KEYBOARD)
                    break
                else: #–ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                    await Message.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ' + str(current_date) + ' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',keyboard=keyboardrasp)
    else: #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ
        dbusers.add_user(userID, firstName, lastName) #–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await Message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å: –°—Ç—É–¥–µ–Ω—Ç/–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",keyboard=keyboardchoise)
'''

@bot.on.private_message(payload={"cmd":"studentGroup"})
async def student(Message: Message):
    user = await bot.api.users.get(Message.from_id)
    userID = user[0].id

    if (dbusers.user_exists(userID)): #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        dbusers.update_userStatus(userID, '–°—Ç—É–¥–µ–Ω—Ç')
    else: #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        firstName = user[0].first_name
        lastName = user[0].last_name

        dbusers.add_user(userID, firstName, lastName)

    await Message.answer('üë• –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É üë•',keyboard=EMPTY_KEYBOARD)
    await bot.state_dispenser.set(Message.peer_id, RegData.GROUP)
    #return '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É'

@bot.on.private_message(state=RegData.GROUP)
async def inputGroup(Message: Message):
    groupName = Message.text.upper()
    user = await bot.api.users.get(Message.from_id)
    userID = user[0].id

    if (dbusers.group_exists(groupName)): #–ì—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (dbusers.user_exists(userID)): #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            dbusers.update_userGroup(userID, groupName)
            await Message.answer("üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìç\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!",keyboard=keyboardmain)
        else: # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            firstName = user[0].first_name
            lastName = user[0].last_name

            dbusers.add_user(userID, firstName, lastName)

            dbusers.update_userGroup(userID, groupName)
            await Message.answer("üìç –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üìç\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!",keyboard=keyboardmain)
    else: #–ì—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await Message.answer("‚ö† –í–≤–µ–¥—ë–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É ‚ö†",{"cmd":"studentGroup"},keyboard=EMPTY_KEYBOARD)



@bot.on.raw_event(GroupEventType.GROUP_JOIN,dataclass=GroupTypes.GroupJoin)
async def group_join(event: GroupTypes.GroupJoin):
    try:
        await bot.api.messages.send(
            peer_id=event.object.user_id,
            message="–ü—Ä–∏–≤–µ—Ç, –Ω–∞ —Å–≤—è–∑–∏ –ú–ê–° –ë–æ—Ç. –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ü–í–ì–£–°–ê. \n–ß—Ç–æ —è —É–º–µ—é? \n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞ –∏ –Ω–µ–¥–µ–ª—é –¥–ª—è —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã. \n\n–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ (–ù–∞—á–∞—Ç—å) —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
            random_id=0
        )
    except VKAPIError(901):
        pass

@bot.on.raw_event(GroupEventType.GROUP_LEAVE,dataclass=GroupTypes.GroupLeave)
async def group_leave(event: GroupTypes.GroupLeave):
    try:
        await bot.api.messages.send(
            peer_id=event.object.user_id,
            message="–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç—ã —Ä–µ—à–∏–ª –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è :(",
            random_id=0
        )
    except VKAPIError(901):
        pass

bot.run_forever()